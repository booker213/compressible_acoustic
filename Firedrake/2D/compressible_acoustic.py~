from firedrake import *

# Script to solve compressible acoustic waves in upto three dimensions
# c^2_0 and \rho_0 will be considered to be scaled to be equal to 1.



# Create mesh
# Current mesh is a unit box  with Nx * Ny elements.

Nx = 128
Nz = Nx
mesh = UnitSquareMesh(Nx, Nz,  quadrilateral=quadrilateral)


# Declare timestep
dt = 1./( pow(Nx,2))

# Declare initial and end time
# Period of waves considered in test is 1s
# We will consider 3 periods initially
t = 0.
end = 3.

# Declare order of the basis in the elements
# Test problem will consider order 0 - a finite volume scheme
order_basis = 2

# Declare flux indicator function
theta = Constant(0.5)

# Declare function spaces on the mesh
# and create mixed function space
# for coupled Poisson Bracket.

V = VectorFunctionSpace(mesh, "DG", order_basis)
R = FunctionSpace(mesh, "DG", order_basis)

W = V*R

# Define trial and test functions on the mixed space

(u, rho) = TrialFunctions(W)
(dFdu_vec, dFdrho) = TestFunctions(W)


# Initial conditions

# Function space
w0 = Function(W)


# Interpolate expressions
u0,rho0 = w0.split()

u0.interpolate(Expression(["sin(2*pi*x[0])*sin(2*pi*0.125)", "sin(2*pi*x[1])*sin(2*pi*0.125)"] ))

rho0.interpolate(Expression("cos(2*pi*x[0])*cos(2*pi*0.125) + cos(2*pi*x[1])*cos(2*pi*0.125) "))


# Assemble initial energy
E0 = assemble ( (0.5*(inner(u0,u0) + rho0**2))*dx)

#print E0

# Set up internal boundary normal on mesh 
# Needed for numerical fluxes in bilinear form

n = FacetNormal(mesh)


# Create bilinear form for linear solver
# Bilinear problem is of the form 
# a(u,v) = L(v)
# Using our Poisson bracket and an implicit midpoint rule
# we see that
# a(u,v) = u^{n+1}*dFdu_vec + rho^{n+1)*dFdrho - 0.5*dt*PB(u^{n+1}, rho^{n+1})
# L(v) = u^{n}*dFdu_vec + rho^{n)*dFdrho + 0.5*dt*PB(u^{n}, rho^{n})


# We note that there are no boundary surface integrals ds, as we require
# the normal of the variational derivative and test function to vanish 
# at the boundary.


#Define varitional derivatives

(u0,rho0) = split(w0)

dHdu0 = u0
dHdrho0 = rho0


# Define discrete divergence
def div_u(u, p):
	return (dot(u, grad(p)))*dx(domain=p.ufl_domain()) + (jump(p)*dot((u('-')*(1-theta)+u('+')*theta), n('-')))*dS


L0 = (dot(u0, dFdu_vec) + rho0*dFdrho )*dx
L1 = -div_u(dFdu_vec, dHdrho0)
L2 = div_u(dHdu0, dFdrho)


L = L0 + 0.5 * dt * ( L1 + L2  )

a = derivative(L0 - 0.5 * dt * ( L1  + L2   ), w0)

# Storage for visualisation
outfile = File('./Results/compressible_acoustic_results.pvd')

u0,rho0 = w0.split()

u0.rename("Velocity")
rho0.rename("Density")


# Output initial conditions
#outfile.write(u0,rho0, time = t)


out = Function(W)
# File for energy output
E_file = open('./Results/energy.txt', 'w')






# Solve loop

while (t < end):
    # Update time
    t+= dt
 
    solve(a == L, out, solver_parameters={'ksp_rtol': 1e-14})
    u, rho = out.split()

    # Assign appropriate name in results file
    u.rename("Velocity")
    rho.rename("Density")
 
    # Output results
    #outfile.write(u, rho, time =t)
 
    # Assign output as previous timestep for next time update
    u0.assign(u)
    rho0.assign(rho)

    # Assemble initial energy
    E = assemble ( (0.5*(inner(u,u) + rho**2))*dx)
 
    E_file.write('%-10s %-10s\n' % (t,abs((E-E0)/E0)))
    # Print time and energy drift, drift should be around machine precision.
    print "At time %g, energy drift is %g" % (t, E-E0)


# Create analytic solutions for error analysis
exact_rho= Function(R)
exact_rho.interpolate(Expression("cos(2*pi*x[0])*cos(2*pi*(t+0.125)) + cos(2*pi*x[1])*cos(2*pi*(t+0.125)) ", t = t))


# Print error for density
error_rho = errornorm(rho, exact_rho,  norm_type='L2')
print "At time %g, l2 error in density is %g" % (t, error_rho)


exact_u = Function(R)
exact_u.interpolate(Expression("sin(2*pi*x[0])*sin(2*pi*(t+0.125))", t = t))

# Print error for  x- velocity
error_u = errornorm(u[0], exact_u,  norm_type='L2')
print "At time %g, l2 error in x-velocity is %g" % (t, error_u)

localenergyfile = File('./Results/local_energy.pvd')

energy_local = Function(R)
energy_local.interpolate(dot(u,u)+rho*rho)

#localenergyfile.write(energy_local, time=t)

# Close energy write
E_file.close()
